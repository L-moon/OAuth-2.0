
OAuth-2

Please see http://code.google.com/apis/accounts/docs/OAuth2.html which
explain it much better than this text. 

Proper documentation of api will come soon , till then use this text to experiment.

You have an application that want to use some resource of other users residing
in some protected place and protected by some authorization server.

For example you/user wants to export all its google contacts to our application. 

Step 1 :
First we need to register our application with service provider. This is
normally done manually. You may need to provide a "redirect uri" . 
Service provider will give you "client identifier" and "client secret" through
which you/application will authenticate it self in next steps.
We also need "authorization uri"  and "token provider uri" . These are 
documented by the service provider.

Once have all this  , we can create a oauth object , for example for
facebook we have some thing like this :

(define oauth-obj
  (make-oauth-2
   #:client-id "Your client ID"
   #:client-secret "Your client secret"
   #:authorization-uri "https://www.facebook.com/dialog/oauth"
   #:token-uri "https://graph.facebook.com/oauth/access_token"
   #:redirect-uri "http://localhost:8000/oauth2callback.rkt"))

For google we have some thing like this :

(define oauth-obj 
  (make-oauth-2
   #:client-id "Your client ID"
   #:client-secret "Your client secret"
   #:authorization-uri "https://accounts.google.com/o/oauth2/auth"
   #:token-uri "https://accounts.google.com/o/oauth2/token"
   #:redirect-uri "http://localhost:8000/oauth2callback.rkt"))


From now on we assume that we have oauth-obj.


Step 2:
So to use the user resource , you need to get authorization from the user which is
given to us by authorization server in form of authorization code.
For this we use the function :

(define (request-owner-for-grant oauth-obj 
                                 #:state (state #f)
                                 #:scope (scope empty)
                                 #:redirect-proc 
                                 (redirect-proc (lambda (str-url) str-url)))

By default it returns the string representation of url of authorization-uri(see oauth-obj) with
get parameters attached , for example :

(define scope (list "https://www.google.com/m8/feeds"))
(request-owner-for-grant oauth-obj #:scope scope) ; returns 

"https://accounts.google.com/o/oauth2/auth?client-id=....&redirect_uri=....&response_type=...& ..etc ... "

One can just copy and paste the above string returned by function in browser to see what it returns.


From now on it is assumed that we are taking about web server side flow , i.e we are web application.

If it is server side flow , then we redirect the user to this url , for example :

(define scope (list "https://www.google.com/m8/feeds"))

(redirect-to 
  (request-owner-for-grant oauth-obj 
                           #:state (encode make-url)
                           #:scope scope))


Here "scope" is the list of service we are requesting and 
"state" is optional parameter that we might use for storing current-state of
our web appl , normally in racket we may pass continuation url in "state".

Now its upto the user and authorization server to grant us the authorization code.

If all goes well , authorization server , redirect user back to our 
redirect-uri(see oauth-obj) with authorization "code" , "state" and other parameters.
Redirect uri here is assumed to be : http://localhost:8000/oauth2callback.rkt

In oauth2callback.rkt we may again redirect to url , which we get from "state" alongwith
other parameters. 




Step 3.
Once we have the authorization code , we need a access token from a token
provider so that we can access the protected resource of a user. 
For this we call the function :

(request-access-token oauth-obj #:code code)

Here code is authorization code. The function returns a hash , from which
we can get access token. For example :

(let ([dict  (request-access-token oauth-obj #:code "auth code here")])
  (hash-ref dict 'access_token))





Step 4:
Once we have access token , we can use this to get protected resource of the
user by passing access token to it(where the resource resides).
For example :

"https://www.google.com/m8/feeds/contacts/default/full?access_token=abcde..."

should return the contacts for a user from google.


